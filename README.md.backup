# chain-status-example
This project is an example of how the [chain-status](https://github.com/kiegroup/chain-status) tool can be integrate in any project.

For example purpose only, this project aims to provide the Pull Requests statuses for [Kogito-related](https://github.com/kiegroup/kogito-pipelines) projects.

## Chain Status Integration

In this section we provide the steps that we performed in order to integrate the `chain-status` tool in this custom repository.

1. Create a custom branch named `gh-pages` storing the webpage content that will be served on the personal Github page.
    - [Optional] If you want to create an empty branch for this purpose, execute the following commands:
    ```bash
    $ git clone ...
    $ git switch --orphan gh-pages
    $ git commit --allow-empty -m "Initial commit on orphan branch"
    $ git push -u origin gh-pages
    ```
2. Create a Markdown file containing information on the project for which you would like to provide the PRs statuses. I created it [here](.ci/chain-status-info.md), under `.ci` folder since it will be used by the Github workflow that we will create later.
3. Create the definition file containing the whole project structure for which we want to provide information, in this case we won't create it but we will refer to the one already present [here](https://raw.githubusercontent.com/kiegroup/kogito-pipelines/main/.ci/pull-request-config.yaml).
    - [Optional] If you need to create your own definition file, you can find more details on how to create it in [build-chain-configuration-reader](https://github.com/kiegroup/build-chain-configuration-reader) project.
4. Create the workflows that aim to automate the Github page generation using the already provided `chain-status` actions ([more details]()).
    1. Generate webpage: the first workflow is in charge to create the webpage content and save it in our `gh-pages` branch.
    2. Generate content: the second workflow generates the content/report that will be showed by the react webapge.
